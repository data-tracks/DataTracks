name: Release
permissions:
  "contents": "write"

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version of Release'
        required: true
        type: string
      tags:
        description: 'Draft Release'
        required: false
        type: boolean
        default: true
  pull_request:
  push:
#   tags:
# - '**[0-9]+.[0-9]+.[0-9]+*' // is version

jobs:
  release:
    name: Release ${{ matrix.target }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ending: .exe
          - os: macos-latest
            target: aarch64-apple-darwin
            ending: ""
          - os: linux-latest
            target: x86_64-unknown-linux-gnu
            ending: ""

    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Set up Rust
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      # Step 3: Install target for cross-compilation (Linux, macOS, Windows)
      - name: Install additional Rust targets
        run: rustup target add ${{ matrix.target }}

      # Step 4: Build the Rust project
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      # Step 5: Upload the build artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: data_tracks-${{ matrix.target }}${{ matrix.ending }}
          path: target/${{ matrix.target }}/release/data_tracks${{ matrix.ending }}
          compression-level: 0