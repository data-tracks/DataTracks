name: ðŸ«— Release DataTracks
permissions:
  "contents": "write"

on:
  workflow_dispatch:
    inputs:
      description:
        description: 'Description Text'
        required: false
        type: string
        default: ""
      draft:
        description: 'Draft Release'
        required: false
        type: boolean
        default: true
      prerelease:
        description: 'Prerelease'
        required: false
        type: boolean
        default: false


jobs:
  release:
    runs-on: ubuntu-latest
    outputs:
      release_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get-version.outputs.version }}
    steps:
      - name: Checkout to get Cargo.toml
        uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: get-version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -n 1 | sed -E 's/version *= *"(.*)"/\1/')
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"

      - name: Create Release
        uses: softprops/action-gh-release@v2
        id: create_release
        with:
          draft: ${{ inputs.draft }}
          prerelease: ${{ inputs.prerelease }}
          name: Release ${{ steps.get-version.outputs.version }}
          tag_name: ${{ steps.get-version.outputs.version }}
          body: ${{ inputs.description }}
        env:
          GITHUB_TOKEN: ${{ github.token }}

  build:
    name: Release ${{ matrix.target }}
    needs:
      - release
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            ending: .exe
            content_type: application/vnd.microsoft.portable-executable
          - os: macos-latest
            target: aarch64-apple-darwin
            ending: ""
            content_type: application/octet-stream
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            ending: ""
            content_type: application/octet-stream

    runs-on: ${{ matrix.os }}

    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: 'true'
          token: ${{ secrets.TRACKVIEW }}

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10
          run_install: false

      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Step 2: Set up Rust
      - name: Set up Rust
        uses: dtolnay/rust-toolchain@stable

      # Step 3: Install target for cross-compilation (Linux, macOS, Windows)
      - name: Install additional Rust targets
        run: rustup target add ${{ matrix.target }}

      # Step 4: Build the Rust project
      - name: Build
        run: cargo build --release --target ${{ matrix.target }}

      # Step 5: Upload the build artifact
      #      - name: Upload artifact
      #        uses: actions/upload-artifact@v4
      #        with:
      #          name: data_tracks-${{ matrix.target }}${{ matrix.ending }}
      #          path: target/${{ matrix.target }}/release/data_tracks${{ matrix.ending }}
      #          compression-level: 0

      # Step 5: Upload asset to release
      - name: Upload artifact
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ needs.release.outputs.release_url }}
          asset_path: target/${{ matrix.target }}/release/data-tracks${{ matrix.ending }}
          asset_name: data-tracks-${{ matrix.target }}${{ matrix.ending }}
          asset_content_type: ${{ matrix.content_type }}

